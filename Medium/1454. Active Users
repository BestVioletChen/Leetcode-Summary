Table: Accounts

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| name          | varchar |
+---------------+---------+
id is the primary key (column with unique values) for this table.
This table contains the account id and the user name of each account.
 

Table: Logins

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| login_date    | date    |
+---------------+---------+
This table may contain duplicate rows.
This table contains the account id of the user who logged in and the login date. A user may log in multiple times in the day.
 

Active users are those who logged in to their accounts for five or more consecutive days.

Write a solution to find the id and the name of active users.

Return the result table ordered by id.

The result format is in the following example.

 

Example 1:

Input: 
Accounts table:
+----+----------+
| id | name     |
+----+----------+
| 1  | Winston  |
| 7  | Jonathan |
+----+----------+
Logins table:
+----+------------+
| id | login_date |
+----+------------+
| 7  | 2020-05-30 |
| 1  | 2020-05-30 |
| 7  | 2020-05-31 |
| 7  | 2020-06-01 |
| 7  | 2020-06-02 |
| 7  | 2020-06-02 |
| 7  | 2020-06-03 |
| 1  | 2020-06-07 |
| 7  | 2020-06-10 |
+----+------------+
Output: 
+----+----------+
| id | name     |
+----+----------+
| 7  | Jonathan |
+----+----------+
Explanation: 
User Winston with id = 1 logged in 2 times only in 2 different days, so, Winston is not an active user.
User Jonathan with id = 7 logged in 7 times in 6 different days, five of them were consecutive days, so, Jonathan is an active user.


## Solutions:
# step1: give row_number for each date of each user
WITH rank_activity AS(
    SELECT id,
           login_date,
           dense_rank() OVER(PARTITION BY id ORDER BY login_date) AS row_num
    FROM Logins
),

# step2: group by diff 
consecutive_logins AS(
    SELECT *,
           DATE_ADD(login_date, INTERVAL -row_num DAY) AS Groupings
            -- If a customer logs in continuously every day, then their difference is constant
    FROM rank_activity
),

grouped_logins AS(
    SELECT id,
           MIN(login_date) AS start_date,
           MAX(login_date) AS end_date,
           row_num,
           Groupings,
           datediff(MAX(Login_Date), MIN(login_date)) AS duration
    FROM consecutive_logins
    GROUP BY id, groupings
    HAVING datediff(MAX(Login_Date), MIN(login_date)) >= 4 # consecutive logins for 5 days
    ORDER BY id, start_date
)

SELECT Distinct gl.id, a.name
FROM grouped_logins gl
JOIN Accounts a ON gl.id = a.id
ORDER BY gl.id;

## Summary:
we cannot use having count(id) >=4 here, cuz it does not fully ensure that these dates are within the span of 5 consecutive days, 
but only counts the number of logins.
